@page "/day2"
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Day @DayNumber</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between">
        <h1>Day @DayNumber</h1>

        <div class="d-flex justify-content-around gap-4 flex-grow-1">
            <h4 class="border border-primary p-1">Part1 Result: @Part1Result</h4>
            <h4 class="border border-primary p-1">Part2 Result: @Part2Result</h4>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-primary" @onclick="Part1">Part 1</button>
            <button class="btn btn-primary" @onclick="Part2" >Part 2</button>
        </div>
    </div>

    @foreach (var report in Reports)
    {
        var text = report.Select(x => x.ToString()).ToList();

        <p>
            @IsSafe(report) - @string.Join(' ', text)
        </p>
    }

</div>

@code {
    private const int DayNumber = 2;

    private long Part1Result { get; set; } = 0;
    private long Part2Result { get; set; } = 0;

    private List<string> Input = new();

    private List<List<int>> Reports = new();

    protected override void OnInitialized()
    {
        try
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, $"day{DayNumber}.txt");
            var file = File.ReadAllText(filePath);
            Input =  file
                .Split("\n")
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void Part1()
    {
        Reports = Input
            .Select(x => x.Split(' ').Select(i => int.TryParse(i.Trim(), out var i1) ? i1 : 0).ToList())
            .ToList();
        Part1Result = Reports.Count(IsSafe);
    }

    private void Part2()
    {
        Reports = Input
            .Select(x => x.Split(' ').Select(i => int.TryParse(i.Trim(), out var i1) ? i1 : 0).ToList())
            .ToList();

        Part2Result = Reports.Count(x => IsSafe(x) || SubSets(x).Any(IsSafe));
    }

    private static bool IsSafe(List<int> report)
    {
        var safe = true;
        for (var i = 0; i < report.Count - 1; i++)
        {
            if (report[i] < report[i + 1] && report[i] >= report[i + 1] - 3)
            {
                continue;
            }

            safe = false;
        }

        if (safe)
        {
            return true;
        }

        safe = true;
        for (var i = 0; i < report.Count - 1; i++)
        {
            if (report[i] > report[i + 1] && report[i] <= report[i + 1] + 3)
            {
                continue;
            }

            safe = false;
        }

        return safe;
    }

    private static List<List<int>> SubSets(List<int> report)
    {
        List<List<int>> result = new();
        for (var i = 0; i < report.Count; i++)
        {
            var subset = report.ToList();
            subset.RemoveAt(i);
            result.Add(subset);
        }

        return result;
    }
}
