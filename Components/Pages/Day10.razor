@page "/day10"
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Day @DayNumber</PageTitle>

<div class="container-fluid w-100">
    <div class="d-flex justify-content-between">
        <h1>Day @DayNumber</h1>

        <div class="d-flex justify-content-around gap-4 flex-grow-1">
            <h4 class="border border-primary p-1">Part1 Result: @Part1Result</h4>
            <h4 class="border border-primary p-1">Part2 Result: @Part2Result</h4>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-primary" @onclick="Part1">Part 1</button>
            <button class="btn btn-primary" @onclick="Part2" >Part 2</button>
        </div>
    </div>

</div>

<table class="table table-sm table-bordered">
    <tbody>
    @for (var rowIdx = 0; rowIdx < HeightMap.Count; rowIdx++)
    {
        var row = HeightMap[rowIdx];

        <tr style="font-family: Consolas; font-size:  10px">
            @for (var colIdx = 0; colIdx < HeightMap[rowIdx].Count; colIdx++)
            {
                var c = row[colIdx];
                var value = (int)(16 - ((c / 9f) * 16f));
                var color = c == 0
                ? "#FF0000"
                : $"#{value:X}{value:X}FF{16-value:X}{16-value:X}";

                <td class="text-center" style="background-color: @color">@c</td>
            }
        </tr>
    }
    </tbody>
</table>

@code {
    private const int DayNumber = 10;

    private long Part1Result { get; set; } = 0;
    private long Part2Result { get; set; } = 0;

    private List<string> Input = new();
    private List<List<int>> HeightMap = new();

    protected override void OnInitialized()
    {
        try
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, $"day{DayNumber}.txt");
            var file = File.ReadAllText(filePath);
            Input =  file
                .Split("\n")
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToList();

            HeightMap = Input
                .Select(x => x.Select(c => int.Parse($"{c}")).ToList())
                .ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void Part1()
    {
        HeightMap = Input
            .Select(x => x.Select(c => int.Parse($"{c}")).ToList())
            .ToList();

        var trailHeads = HeightMap
            .SelectMany((x, row) => x.Index().Where(y => y.Item == 0).Select(y => (Row: row, Col: y.Index)).ToList())
            .ToList();

        Part1Result = trailHeads
            .Select(x => GetSummits(x.Row, x.Col).Distinct().Count())
            .Sum();
    }

    private void Part2()
    {
        HeightMap = Input
            .Select(x => x.Select(c => int.Parse($"{c}")).ToList())
            .ToList();

        var trailHeads = HeightMap
            .SelectMany((x, row) => x.Index().Where(y => y.Item == 0).Select(y => (Row: row, Col: y.Index)).ToList())
            .ToList();

        Part2Result = trailHeads
            .Select(x => GetSummits(x.Row, x.Col).Count())
            .Sum();
    }

    private List<(int Row, int Col)> GetSummits(int row, int col)
    {
        var height = HeightMap[row][col];
        var summits = new List<(int Row, int Col)>();

        if (height == 9)
        {
            return [(row, col)];
        }

        foreach (var position in GetAdjacent(row, col))
        {
            var nextHeight = HeightMap[position.Row][position.Col];
            if (nextHeight == height + 1)
            {
                summits.AddRange(GetSummits(position.Row, position.Col));
            }
        }

        return summits;
    }

    private List<(int Row, int Col)> GetAdjacent(int row, int col) =>
        Enum.GetValues<Direction>()
            .Select(x => NextPosition(row, col, x))
            .Where(x => x.Row >= 0 && x.Row < HeightMap.Count && x.Col >= 0 && x.Col < HeightMap[0].Count)
            .ToList();

    private (int Row, int Col) NextPosition(int rowIdx, int colIdx, Direction direction) => direction switch
        {
            Direction.Up => (rowIdx - 1, colIdx),
            Direction.Right => (rowIdx, colIdx + 1),
            Direction.Down => (rowIdx + 1, colIdx),
            Direction.Left => (rowIdx, colIdx - 1),
            _ => (rowIdx, colIdx),
        };

    private enum Direction
    {
        Up,
        Right,
        Down,
        Left,
    }
}
