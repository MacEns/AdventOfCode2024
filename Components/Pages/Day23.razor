@page "/day23"
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Day @DayNumber</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-2">
        <h1>Day @DayNumber</h1>

        <div class="d-flex justify-content-around gap-4 flex-grow-1">
            <h4 class="border border-primary p-1">Part1 Result: @Part1Result</h4>
            <h4 class="border border-primary p-1">Part2 Result: @Part2Result</h4>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-primary" @onclick="Part1">Part 1</button>
            <button class="btn btn-primary" @onclick="Part2" >Part 2</button>
        </div>
    </div>
    
    <div class="d-flex justify-content-start gap-4" style="font-family: Consolas">
        <div class="d-flex flex-column px-2 border">
            @foreach (var line in Input.Order())
            {
                <p class="my-0">@line</p>
            }
        </div>
        
        <div class="d-flex flex-column px-2 border">
            @foreach (var party in Parties)
            {
                <p class="my-0">@string.Join(", ", party)</p>
            }
        </div>
    </div>



</div>

@code {
    private const int DayNumber = 23;

    private long Part1Result { get; set; } = 0;
    private long Part2Result { get; set; } = 0;

    private List<string> Input = new();

    private Dictionary<string, List<string>> Connections = new();
    private List<List<string>> Parties = new();


    protected override void OnInitialized()
    {
        try
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, $"day{DayNumber}.txt");
            var file = File.ReadAllText(filePath);
            Input =  file
                .Split("\n")
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToList();

            foreach (var line in Input)
            {
                var parts = line.Split("-");
                var a = parts[0];
                var b = parts[1];

                if (Connections.ContainsKey(a))
                {
                    Connections[a].Add(b);
                }
                else
                {
                    Connections.Add(a, new List<string> { b });
                }

                if (Connections.ContainsKey(b))
                {
                    Connections[b].Add(a);
                }
                else
                {
                    Connections.Add(b, new List<string> { a });
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void Part1()
    {
        Parties = new List<List<string>>();
        foreach (var connection in Connections)
        {
            var host = connection.Key;
            var networks = connection
                .Value
                .Where(x => Connections[x].Any(y => Connections[y].Contains(host)))
                .ToList();
            var party = networks.Prepend(host).Order().ToList();
            if (party.Any(x => x.StartsWith("t")))
            {
                Parties.Add(party);
            }
        }

        Parties = Parties.DistinctBy(x => string.Join(", ", x)).OrderBy(x => x.First()).ToList();

        Part1Result = Parties.Count;
    }

    private void Part2()
    {
    }
}
