@page "/day19"
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Day @DayNumber</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-4">
        <h1>Day @DayNumber</h1>

        <div class="d-flex justify-content-around gap-4 flex-grow-1">
            <h4 class="border border-primary p-1">Part1 Result: @Part1Result</h4>
            <h4 class="border border-primary p-1">Part2 Result: @Part2Result</h4>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-primary" @onclick="Part1">Part 1</button>
            <button class="btn btn-primary" @onclick="Part2" >Part 2</button>
        </div>
    </div>

    <div class="d-flex justify-content-start gap-2">
        <div class="d-flex flex-column border p-2">
            <p class="fw-bold my-0">Available: @AvailablePatterns.Count</p>
            <table class="table table-sm table-bordered">
                <tbody>
                    @foreach (var (i, pattern) in AvailablePatterns.Index())
                    {
                        <tr>
                            <td class="text-center">@i</td>
                            <td class="text-center">
                                @foreach (var c in pattern)
                                {
                                    <span class="@GetColor(c)">@c</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex flex-column border p-2">
            <p class="fw-bold my-0">Requested: @RequestedPatterns.Count</p>
            <table class="table table-sm table-bordered">
                <tbody>
                    @foreach (var (i, pattern) in RequestedPatterns.Index())
                    {
                        <tr>
                            <td class="text-center">@i</td>
                            <td class="text-center">
                                @foreach (var c in pattern)
                                {
                                    <span class="@GetColor(c)">@c</span>
                                }
                            </td>
                            <td>
                                @foreach (var starter in AvailableStrings.Where(x => RequestStrings[i].StartsWith(x)))
                                {
                                    <span class="my-0 me-1">@(new string(starter.ToArray())),</span>
                                }
                            </td>
                            <td>
                                @foreach (var match in Matches[i])
                                {
                                    <span class="my-0 me-1">@(new string(match.ToArray()))</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

</div>

@code {
    private const int DayNumber = 19;

    private long Part1Result { get; set; } = 0;
    private long Part2Result { get; set; } = 0;

    private List<string> Input = new();

    private List<List<char>> AvailablePatterns = new();
    private List<string> AvailableStrings = new();
    private List<List<char>> RequestedPatterns = new();
    private List<string> RequestStrings = new();

    private List<List<List<char>>> Matches = new();

    protected override void OnInitialized()
    {
        try
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, $"day{DayNumber}.txt");
            var file = File.ReadAllText(filePath);
            Input =  file
                .Split("\n")
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToList();
            LoadPatterns();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void Part1()
    {
        Part1Result = 0;
        LoadPatterns();

        foreach (var (idx, request) in RequestStrings.Index())
        {
            var patternStrings = AvailableStrings
                .Where(x => request.Contains(x))
                .Order()
                .ToList();

            Console.WriteLine($"\n\nChecking request {idx} with {patternStrings.Count} patterns: {request}");
            Part1Result += FindMatch(patternStrings, request).Count > 0 ? 1 : 0;

        }
    }

    private void Part2()
    {
        LoadPatterns();
    }

    private static string GetColor(char c) => c switch
        {
            'w' => "text-info",
            'u' => "text-primary",
            'r' => "text-danger",
            'g' => "text-success",
            _ => string.Empty,
        };

    private void LoadPatterns()
    {
        AvailableStrings = Input.FirstOrDefault().Split(",").Select(x => x.Trim()).ToList();
        AvailablePatterns = AvailableStrings.Select(x => x.ToList()).ToList();
        RequestStrings = Input
            .Where(x => !x.Contains(','))
            .Select(x => x.Trim())
            .ToList();
        RequestedPatterns = RequestStrings.Select(x => x.ToList()).ToList();
        Matches = RequestedPatterns.Select(x => new List<List<char>>()).ToList();
    }

    private List<string> FindMatch(List<string> patterns, string requested)
    {
        var result = new List<string>();

        var possiblePatterns = patterns.Where(requested.Contains).ToList();
        var possibleStarters = patterns.Where(requested.StartsWith).ToList();

        foreach (var pattern in possibleStarters)
        {
            Console.WriteLine($"\nChecking {requested}: {pattern}");
            Stack<string> current = new();
            current.Push(pattern);

            var remainingPatterns = possiblePatterns.Except([pattern]).ToList();
            var remainingRequest = requested.Remove(0, pattern.Length);

            var nextOptions = remainingPatterns.Where(remainingRequest.StartsWith).ToList();
            while (nextOptions.Any() && remainingRequest.Length > 0)
            {
                var nextPattern = nextOptions.FirstOrDefault();

                if (string.IsNullOrWhiteSpace(nextPattern))
                {
                    var prev = current.Pop();
                    remainingPatterns.Add(prev);
                    remainingRequest = prev + remainingRequest;
                    break;
                }

                current.Push(nextPattern);
                var stack = current.ToList();
                stack.Reverse();
                Console.WriteLine($"Pushed {nextPattern}: {string.Join(" ", stack)}");
                remainingPatterns = remainingPatterns.Except(current.ToList()).ToList();
                remainingRequest = remainingRequest.Remove(0, nextPattern.Length);
                nextOptions = remainingPatterns.Where(remainingRequest.StartsWith).ToList();
            }

            if (remainingRequest.Length == 0)
            {
                var resultList = current.ToList();
                resultList.Reverse();
                result.AddRange(resultList);
                Matches[RequestStrings.IndexOf(requested)] = resultList.Select(x => x.ToList()).ToList();
                Console.WriteLine($"Found match: {string.Join(" ", resultList)}");
            }
            else
            {
                var resultList = current.ToList();
                resultList.Reverse();
                Console.WriteLine($"Unabled to find match for {requested}: {string.Join(" ", resultList)}");
                Console.WriteLine($"Remaining: {string.Join(" ", remainingPatterns)}");
            }
        }

        return result;
    }
}
