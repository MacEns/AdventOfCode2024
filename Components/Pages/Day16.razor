@page "/day16"
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Day @DayNumber</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-4">
        <h1>Day @DayNumber</h1>

        <div class="d-flex gap-4">
            <p class="border border-primary p-1">Start: @StartPosition</p>
            <p class="border border-primary p-1">End: @EndPosition</p>
            <p class="border border-primary p-1">Checked: @CheckedNodes.Count</p>
            <p class="border border-primary p-1">Successful: @SuccessfulPaths.Count</p>
        </div>

        <div class="d-flex justify-content-around gap-4 flex-grow-1">
            <h4 class="border border-primary p-1">Part1 Result: @Part1Result</h4>
            <h4 class="border border-primary p-1">Part2 Result: @Part2Result</h4>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-primary" @onclick="Part1">Part 1</button>
            <button class="btn btn-primary" @onclick="Part2" >Part 2</button>
        </div>
    </div>

    <table class="table table-sm table-bordered" style="font-size: 3px; font-family: Consolas">
        <thead>
        <tr>
            <th></th>
                @foreach (var c in Map[0].Index())
                {
                    <th class="text-center">@c.Index</th>
                }
        </tr>
        </thead>
        <tbody>
        @foreach (var row in Map.Index())
        {
            <tr>
                <th class="text-center">@row.Index</th>
                @foreach (var (colIdx, c) in row.Item.Index())
                {
                    var cellClass = c == WallChar
                        ? "table-dark"
                        : c == StartChar || c == EndChar
                            ? "table-success"
                            : LastCheckedNodes.Any(x => x.Position.Equals(new LkVector2(colIdx, row.Index)))
                                ? "table-danger"
                                : CurrentPaths.Any(x => x.Any(y => y.Position.Equals(new LkVector2(colIdx, row.Index))))
                                    ? "table-primary"
                                    : CheckedNodes.Any(x => x.Key.Equals(new LkVector2(colIdx, row.Index)))
                                        ? "table-warning"
                                        : string.Empty;

                    <td class="@cellClass text-center">@c</td>
                }
            </tr>
        }
        </tbody>
    </table>

</div>

@code {
    private const int DayNumber = 16;

    private long Part1Result { get; set; } = 0;
    private long Part2Result { get; set; } = 0;

    private List<string> Input = new();
    private List<List<char>> Map = new();
    private LkVector2 StartPosition = new();
    private LkVector2 EndPosition = new();

    private List<List<Node>> Paths = new();
    private List<List<Node>> CurrentPaths = new();
    private List<List<Node>> SuccessfulPaths = new();
    private Dictionary<LkVector2, List<Node>> CheckedNodes = new();
    private HashSet<Node> LastCheckedNodes = new();

    private static readonly char StartChar = 'S';
    private static readonly char EndChar = 'E';
    private static readonly char WallChar = '#';
    private static readonly char OpenChar = '.';

    protected override void OnInitialized()
    {
        try
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, $"day{DayNumber}.txt");
            var file = File.ReadAllText(filePath);
            Input = file
                .Split("\n")
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToList();
            LoadMap1();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task Part1()
    {
        LoadMap1();

        Paths = await FindAllPaths();

        Part1Result = Paths.Count > 0 ? Paths.Select(GetPathScore).Min() : -1;
    }

    private void LoadMap1()
    {
        Map = Input
            .Where(x => x.StartsWith(WallChar))
            .Select(x => x.ToList())
            .ToList();
        var startRow = Map.FirstOrDefault(x => x.Contains(StartChar));
        StartPosition = new LkVector2(startRow.IndexOf(StartChar), Map.IndexOf(startRow));

        var endRow = Map.FirstOrDefault(x => x.Contains(EndChar));
        EndPosition = new LkVector2(endRow.IndexOf(EndChar), Map.IndexOf(endRow));
    }

    private async Task<List<List<Node>>> FindAllPaths()
    {
        var startNode = new Node(Direction.Right, StartPosition);
        CurrentPaths = NextSteps(new List<Node> { startNode });

        foreach (var node in CurrentPaths)
        {
            if (!CheckedNodes.TryAdd(node.Last().Position, node))
            {
                var nodeScore = GetPathScore(node);
                var existingScore = GetPathScore(CheckedNodes[node.Last().Position]);
                CheckedNodes[node.Last().Position] = nodeScore < existingScore ? node : CheckedNodes[node.Last().Position];
            }
        }

        SuccessfulPaths = [];

        var count = 0;
        while (CurrentPaths.Count > 1)
        {
            var newNodes = new List<List<Node>>();
            LastCheckedNodes = [];
            CurrentPaths = CurrentPaths.GroupBy(x => x.Last().Position).Select(x => x.MinBy(GetPathScore)).ToList();
            foreach (var path in CurrentPaths)
            {
                var nextSteps = NextSteps(path);
                var validSteps = new List<List<Node>>();

                foreach (var newPath in nextSteps)
                {
                    var lastPosition = newPath.Last().Position;
                    if (newPath.Count(x => x.Position.Equals(lastPosition)) > 1)
                    {
                        continue;
                    }

                    if (newPath.Any(n => n.Position.Equals(EndPosition)) || !CheckedNodes.ContainsKey(lastPosition))
                    {
                        validSteps.Add(newPath);
                    }
                    else if (CheckedNodes.ContainsKey(lastPosition))
                    {
                        var nodeScore = GetPathScore(newPath);
                        var existingScore = GetPathScore(CheckedNodes[lastPosition]);
                        if (nodeScore < existingScore)
                        {
                            CheckedNodes[lastPosition] = newPath;
                        }
                    }
                }

                newNodes.AddRange(validSteps);

                foreach (var node in newNodes)
                {
                    LastCheckedNodes.Add(node.Last());
                    if (!CheckedNodes.TryAdd(node.Last().Position, node))
                    {
                        var nodeScore = GetPathScore(node);
                        var existingScore = GetPathScore(CheckedNodes[node.Last().Position]);
                        CheckedNodes[node.Last().Position] = nodeScore < existingScore ? node : CheckedNodes[node.Last().Position];
                    }
                }
            }

            CurrentPaths = newNodes;
            SuccessfulPaths.AddRange(newNodes.Where(x => x.Any(y => y.Position.Equals(EndPosition))));
            count++;

            if (CurrentPaths.Count < 50 || count % 50 == 0)
            {
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
            }
        }

        return CurrentPaths;
    }

    private List<List<Node>> NextSteps(List<Node> currentPath)
    {
        var current = currentPath.Last();
        List<List<Node>> possiblePaths = [];

        if (current.Equals(EndPosition))
        {
            Console.WriteLine($"Found end at {current}");
            return [currentPath];
        }

        var straight = GetNextPosition(current.Position, current.Direction);
        if (PositionIsValid(straight) && !currentPath.Any(x => x.Position.Equals(straight)))
        {
            possiblePaths.Add([..currentPath, new Node(current.Direction, straight)]);
        }

        var nextCCw = GetNextPosition(current.Position, TurnCounterClockwise(current.Direction));
        if (PositionIsValid(nextCCw) && !currentPath.Any(x => x.Position.Equals(nextCCw)))
        {
            possiblePaths.Add([..currentPath, new Node(TurnCounterClockwise(current.Direction), nextCCw)]);
        }

        var nextCw = GetNextPosition(current.Position, TurnClockwise(current.Direction));
        if (PositionIsValid(nextCw) && !currentPath.Any(x => x.Position.Equals(nextCw)))
        {
            possiblePaths.Add([..currentPath, new Node(TurnClockwise(current.Direction), nextCw)]);
        }

        return possiblePaths;
    }

    private long GetPathScore(List<Node> path)
    {
        var stepScore = 1;
        var turnScore = 1000;

        var score = 0;
        for (var i = 1; i < path.Count; i++)
        {
            var current = path[i];
            var previous = path[i - 1];

            score += stepScore;
            if (current.Direction != previous.Direction)
            {
                score += turnScore;
            }
        }

        return score;
    }

    private bool PositionIsValid(LkVector2 position)
    {
        if (position.Y < 0 || position.Y >= Map.Count || position.X < 0 || position.X >= Map.FirstOrDefault().Count)
        {
            return false;
        }

        return Map[(int)position.Y][(int)position.X] == OpenChar;
    }

    private void Part2()
    {
    }

    private class Node
    {
        public Node(Direction d, LkVector2 p)
        {
            Direction = d;
            Position = p;
        }

        public Direction Direction { get; set; }
        public LkVector2 Position { get; set; }
    }

    private LkVector2 GetNextPosition(LkVector2 position, Direction direction) => direction switch
    {
        Direction.Up => new(position.X, position.Y - 1),
        Direction.Right => new(position.X + 1, position.Y),
        Direction.Down => new(position.X, position.Y + 1),
        Direction.Left => new(position.X - 1, position.Y),
        _ => new(position.X, position.Y),
    };

    private Direction TurnClockwise(Direction direction) => direction switch
    {
        Direction.Up => Direction.Right,
        Direction.Right => Direction.Down,
        Direction.Down => Direction.Left,
        _ => Direction.Up,
    };

    private Direction TurnCounterClockwise(Direction direction) => direction switch
    {
        Direction.Up => Direction.Left,
        Direction.Right => Direction.Up,
        Direction.Down => Direction.Right,
        _ => Direction.Down,
    };

    private enum Direction
    {
        Up,
        Right,
        Down,
        Left,
    }
}
