@page "/day16"
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Day @DayNumber</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-4">
        <h1>Day @DayNumber</h1>

        <div class="d-flex gap-4">
            <p class="border border-primary p-1">Checked: @CheckedNodes.Count</p>
        </div>

        <div class="d-flex justify-content-around gap-4 flex-grow-1">
            <h4 class="border border-primary p-1">Part1 Result: @Part1Result</h4>
            <h4 class="border border-primary p-1">Part2 Result: @Part2Result</h4>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-primary" @onclick="Part1">Part 1</button>
            <button class="btn btn-primary" @onclick="Part2" >Part 2</button>
        </div>
    </div>


    <div style="font-size: 5px; font-family: Consolas">
        <table class="table table-sm table-bordered">
            <tbody>
            <tr>
                <th class="m-0 p-0"></th>
                @for (var x = 0; x < Width; x++)
                {
                    <th class="text-center m-0 p-0">@x</th>
                }
            </tr>
            @for (var y = 0; y < Height; y++)
            {
                <tr>
                    <th class="text-center m-0 p-0">@y</th>
                    @for (var x = 0; x < Width; x++)
                    {
                        var value = GetText(x, y);
                        var cssClass = Paths.Any(p => p.Contains((x, y)))
                        ? "table-warning"
                        : value switch
                            {
                                "#" => "table-dark",
                                "%" => "table-danger",
                                "S" or "E" => "table-primary",
                                _ => string.Empty
                            };

                        <td class="text-center m-0 p-0 @cssClass">@value</td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>

</div>

@code {
    private const int DayNumber = 16;

    private long Part1Result { get; set; } = 0;
    private long Part2Result { get; set; } = 0;

    private List<string> Input = new();

    private Dictionary<(int X, int Y), char> Grid = new();
    private Dictionary<(int X, int Y), int> CheckedNodes = new();
    private int Width { get; set; } = 0;
    private int Height { get; set; } = 0;
    private (int X, int Y) Start { get; set; }
    private (int X, int Y) End { get; set; }

    private List<HashSet<(int X, int Y)>> Paths = new();
    private HashSet<(int X, int Y)> PathHash = new();

    private static readonly char StartChar = 'S';
    private static readonly char EndChar = 'E';
    private static readonly char WallChar = '#';
    private static readonly char OpenChar = '.';

    protected override void OnInitialized()
    {
        try
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, $"day{DayNumber}.txt");
            var file = File.ReadAllText(filePath);
            Input = file
                .Split("\n")
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToList();
            LoadGrid();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task Part1()
    {
        LoadGrid();
        FindAllPaths();
    }

    private void Part2()
    {
    }

    private void FindAllPaths()
    {
        Paths = FindAllPaths([End]).Select(x => x.ToHashSet()).ToList();

        Console.WriteLine($"Found {Paths.Count} paths");
    }

    private List<List<(int X, int Y)>> FindAllPaths(List<(int X, int Y)> currentPath)
    {
            var last = currentPath.LastOrDefault();
            if (CheckedNodes[last] == CheckedNodes[Start])
            {
                return [currentPath];
            }

            var nextPaths = GetNeighbours(last)
                    .Where(x => CheckedNodes[x] == CheckedNodes[last] - 1)
                    .Select(x => currentPath.Append(x).ToList())
                    .ToList();

            return nextPaths.SelectMany(FindAllPaths).ToList();
    }

    private void LoadGrid()
    {
        Grid = Input
            .SelectMany((row, y) => row.Select((col, x) => ((x, y), col)))
            .ToDictionary();
        Width = Input[0].Length;
        Height = Input.Count;
        Start = Grid.First(x => x.Value == 'S').Key;
        End = Grid.First(x => x.Value == 'E').Key;
        Console.WriteLine("\nGrid loaded");
        AssignCellDistances();
        Console.WriteLine("Cell Distances set");
    }

    private void AssignCellDistances()
    {
        var unvisited = Grid.Keys.ToDictionary(x => x, _ => int.MaxValue);
        unvisited[Start] = 0;

        while (unvisited.Any())
        {
            var current = unvisited.MinBy(x => x.Value).Key;
            var neighbours = GetNeighbours((current.X, current.Y));
            foreach (var neighbour in neighbours)
            {
                if (unvisited.ContainsKey(neighbour))
                {
                    var distance = unvisited[current] + 1;
                    if (distance < unvisited[neighbour])
                    {
                        unvisited[neighbour] = distance;
                    }
                }
            }

            CheckedNodes.TryAdd(current, unvisited[current]);
            unvisited.Remove(current);
        }
    }

    private List<(int X, int Y)> GetNeighbours((int X, int Y) current) => new List<(int X, int Y)>
        {
            (current.X, current.Y + 1),
            (current.X + 1, current.Y),
            (current.X, current.Y - 1),
            (current.X - 1, current.Y),
        }
        .Where(PositionIsValid)
        .ToList();

    private bool PositionIsValid((int X, int Y) position) =>
        !(position.Y < 0 || position.Y >= Height || position.X < 0 || position.X >= Width)
        && Grid.GetValueOrDefault((position.X, position.Y)) != '#';

    private string GetText(int x, int y)
    {
        var isStart = Start.X == x && Start.Y == y;
        var isEnd = End.X == x && End.Y == y;
        return isStart
            ? "S"
            : isEnd
                ? "E"
                : Grid.GetValueOrDefault((x, y)) == '#'
                    ? "#"
                    : CheckedNodes.ContainsKey((x, y))
                        ? CheckedNodes[(x, y)].ToString()
                        : ".";

    }
}
