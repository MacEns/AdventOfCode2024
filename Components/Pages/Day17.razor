@page "/day17"
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Day @DayNumber</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between">
        <h1>Day @DayNumber</h1>

        <div class="d-flex justify-content-around gap-4 flex-grow-1">
            <h4 class="border border-primary p-1">Part1 Result: @Part1Result</h4>
            <h4 class="border border-primary p-1">Part2 Result: @Part2Result</h4>
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-primary" @onclick="Part1">Part 1</button>
            <button class="btn btn-primary" @onclick="Part2" >Part 2</button>
        </div>
    </div>

    <div style="font-family: Consolas; ">

        <p class="my-0">Register A: @RegisterA</p>
        <p class="my-0">Register B: @RegisterB</p>
        <p class="my-0">Register C: @RegisterC</p>
        <br/>

        <p class="my-0">InstructionPointer: @InstructionPointer</p>
        <p class="my-0">Instructions:
            <span>
                @foreach (var (i, instruction) in Instructions.Index())
                {
                    var cssClass = i == InstructionPointer ? "fw-bold text-danger" : string.Empty;
                    var text = i == 0 ? instruction.ToString() : $", {instruction}";
                    <span class="@cssClass">@text</span>
                }
            </span>
        </p>
        <br/>

        <p class="my-0">ProgramOutput: @ProgramOutput</p>
    </div>
</div>

@code {
    private const int DayNumber = 17;

    private long Part1Result { get; set; } = 0;
    private long Part2Result { get; set; } = 0;

    private List<string> Input = new();

    private int InstructionPointer = 0;
    private long RegisterA = 0;
    private long RegisterB = 0;
    private long RegisterC = 0;
    private List<int> Instructions = new();
    private string ProgramOutput = string.Empty;

    protected override void OnInitialized()
    {
        try
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, $"day{DayNumber}.txt");
            var file = File.ReadAllText(filePath);
            Input =  file
                .Split("\n")
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToList();
            ParseInput();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void ParseInput()
    {
        InstructionPointer = 0;
        ProgramOutput = string.Empty;
        RegisterA = long.Parse(Input.FirstOrDefault(x => x.StartsWith("Register A:")).Split(" ").LastOrDefault());
        RegisterB = long.Parse(Input.FirstOrDefault(x => x.StartsWith("Register B:")).Split(" ").LastOrDefault());
        RegisterC = long.Parse(Input.FirstOrDefault(x => x.StartsWith("Register C:")).Split(" ").LastOrDefault());
        Instructions = Input.FirstOrDefault(x => x.StartsWith("Program:"))
            .Split(" ")
            .LastOrDefault()
            .Trim()
            .Split(',')
            .Select(int.Parse)
            .ToList();
    }

    private async Task Part1()
    {
        ParseInput();

        Console.WriteLine($"\nRegisterA: {RegisterA}");
        await RunProgram(true);
    }

    private void Part2()
    {
        ParseInput();

        Console.WriteLine("Starting part 2...");
        var defaultB = RegisterB;
        var defaultC = RegisterC;
        var defaultInstructions = Instructions.ToList();

        var initialProgram = string.Join(",", Instructions); // 2,4,1,2,7,5,4,3,0,3,1,7,5,5,3,0

        // 2, 4, RegisterB = (RegisterA) % 8;                           - (((((RegisterA) % 8) XOR (2)) XOR (RegisterA / Math.Pow(2, (((RegisterA) % 8) XOR (2))))) XOR 7) % 8 == 2
        // 1, 2, RegisterB = RegisterB XOR (2);                         - (((RegisterB XOR (2)) XOR (RegisterA / Math.Pow(2, (RegisterB XOR (2))))) XOR 7) % 8 == 2
        // 7, 5, RegisterC = RegisterA / Math.Pow(2, (RegisterB));      - ((RegisterB XOR (RegisterA / Math.Pow(2, (RegisterB)))) XOR 7) % 8 == 2
        // 4, 3, RegisterB = RegisterB XOR RegisterC;                   - ((RegisterB XOR RegisterC) XOR 7) % 8 == 2
        // 0, 3, RegisterA = RegisterA / Math.Pow(2, (3));              - RegisterA = RegisterA / 8
        // 1, 7, RegisterB = RegisterB XOR (7);                         - (RegisterB XOR 7) % 8 == 2
        // 5, 5, AddOutput($"{(RegisterB) % 8}");                       - (RegisterB) % 8 == 2
        // 3, 0 InstructionPointer = operand;

        var currentA = 4819074063L;

        while (initialProgram != ProgramOutput && currentA >= 0)
        {
            currentA += 2;

            var aMod8 = currentA % 8;
            var aMod8Xor2 = aMod8 ^ 2;
            var validStart = (aMod8Xor2 ^ (int)(currentA / Math.Pow(2, aMod8Xor2)) ^ 7) % 8 == 2;
            if (!validStart) continue;

            RegisterA = currentA;
            RegisterB = defaultB;
            RegisterC = defaultC;
            Instructions = defaultInstructions.ToList();
            InstructionPointer = 0;
            ProgramOutput = string.Empty;

            /*while (InstructionPointer < Instructions.Count - 1)
            {
                var opCode = Instructions[InstructionPointer];
                await GetOperation(opCode);

                if (opCode == 5 && !string.IsNullOrWhiteSpace(ProgramOutput) && !initialProgram.StartsWith(ProgramOutput))
                {
                    break;
                }
                else if (opCode == 5 && ProgramOutput.Length > 3)
                {
                    Console.WriteLine($"{currentA}: {ProgramOutput}");
                }
            }*/

            while (RegisterA != 0)
            {
                // var registerB = (RegisterA % 8) ^ 2L;
                // var registerC = (long)(RegisterA / Math.Pow(2, (registerB)));
                // var value = (registerB ^ registerC ^ 7) % 8;
                // if (value != defaultInstructions[outputIndex]) break;

                RegisterB = (RegisterA % 8) ^ 2;
                RegisterC = (long)(RegisterA / Math.Pow(2, RegisterB));
                RegisterB ^= RegisterC;
                RegisterA /= 8;
                RegisterB ^= 7;
                AddOutput($"{(RegisterB) % 8}");

                if (!string.IsNullOrWhiteSpace(ProgramOutput) && !initialProgram.StartsWith(ProgramOutput))
                {
                    break;
                }
            }

            if (ProgramOutput.Length > 15 && initialProgram.StartsWith(ProgramOutput[..5]))
            {
                Console.WriteLine($"{currentA}: {ProgramOutput}");
            }
        }
        // 2,4,1,2,7,5,4,3,  0,3,1,7,5,5,3,0
        ProgramOutput = $"Found match for {currentA}: ({initialProgram}) == ({ProgramOutput})";
    }

    private async Task RunProgram(bool printOp = false)
    {
        while (InstructionPointer < Instructions.Count)
        {
            var opCode = Instructions[InstructionPointer];
            if (printOp) Console.WriteLine(GetOperationName(opCode));
            await GetOperation(opCode);
        }
    }

    private async Task GetOperation(int opCode)
    {
        var operation = opCode switch
        {
            0 => Task.Run(() => Adv(Instructions[InstructionPointer + 1])),
            1 => Task.Run(() => Bxl(Instructions[InstructionPointer + 1])),
            2 => Task.Run(() => Bst(Instructions[InstructionPointer + 1])),
            3 => Task.Run(() => Jnz(Instructions[InstructionPointer + 1])),
            4 => Task.Run(() => Bxc(Instructions[InstructionPointer + 1])),
            5 => Task.Run(() => Out(Instructions[InstructionPointer + 1])),
            6 => Task.Run(() => Bdv(Instructions[InstructionPointer + 1])),
            7 => Task.Run(() => Cdv(Instructions[InstructionPointer + 1])),
            _ => Task.Run(() => throw new Exception("Invalid opcode")),
        };

        await operation;
    }

    private long GetComboOperand(int operand) => operand switch
    {
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => RegisterA,
        5 => RegisterB,
        6 => RegisterC,
        _ => throw new Exception("Invalid operand")
    };

    // The adv instruction (opcode 0) performs division. The numerator is the value in the A register.
    // The denominator is found by raising 2 to the power of the instruction's combo operand.
    // (So, an operand of 2 would divide A by 4 (2^2); an operand of 5 would divide A by 2^B.)
    // The result of the division operation is truncated to an integer and then written to the A register.
    private void Adv(int operand)
    {
        RegisterA = (long)(RegisterA / Math.Pow(2, GetComboOperand(operand)));
        InstructionPointer += 2;
    }

    // The bxl instruction (opcode 1) calculates the bitwise XOR of register B and the instruction's literal operand,
    // then stores the result in register B.
    private void Bxl(int operand)
    {
        RegisterB = RegisterB ^ operand;
        InstructionPointer += 2;
    }

    // The bst instruction (opcode 2) calculates the value of its combo operand modulo 8 (thereby keeping only its
    // lowest 3 bits), then writes that value to the B register.
    private void Bst(int operand)
    {
        RegisterB = GetComboOperand(operand) % 8;
        InstructionPointer += 2;
    }

    // The jnz instruction (opcode 3) does nothing if the A register is 0. However, if the A register is not zero,
    // it jumps by setting the instruction pointer to the value of its literal operand; if this instruction jumps,
    // the instruction pointer is not increased by 2 after this instruction.
    private void Jnz(int operand)
    {
        if (RegisterA != 0)
        {
            InstructionPointer = operand;
        }
        else
        {
            InstructionPointer += 2;
        }
    }

    // The bxc instruction (opcode 4) calculates the bitwise XOR of register B and register C, then stores the
    // result in register B. (For legacy reasons, this instruction reads an operand but ignores it.)
    private void Bxc(int operand)
    {
        RegisterB = RegisterB ^ RegisterC;
        InstructionPointer += 2;
    }

    // The out instruction (opcode 5) calculates the value of its combo operand modulo 8, then outputs that value.
    // (If a program outputs multiple values, they are separated by commas.)
    private void Out(int operand)
    {
        AddOutput($"{GetComboOperand(operand) % 8}");
        InstructionPointer += 2;
    }

    // The bdv instruction (opcode 6) works exactly like the adv instruction except that the result is stored
    // in the B register. (The numerator is still read from the A register.)
    private void Bdv(int operand)
    {
        RegisterB = (long)(RegisterA / Math.Pow(2, GetComboOperand(operand)));
        InstructionPointer += 2;
    }

    // The cdv instruction (opcode 7) works exactly like the adv instruction except that the result is stored
    // in the C register. (The numerator is still read from the A register.)
    private void Cdv(int operand)
    {
        RegisterC = (long)(RegisterA / Math.Pow(2, GetComboOperand(operand)));
        InstructionPointer += 2;
    }

    private void AddOutput(string newOutput)
    {
        ProgramOutput = string.IsNullOrWhiteSpace(ProgramOutput)
            ? newOutput
            : string.Join(",", ProgramOutput, newOutput);
    }

    private string GetOperationName(int opCode)
    {
        return $"{opCode}: " + opCode switch
        {
            0 => $"Adv({Instructions[InstructionPointer + 1]})",
            1 => $"Bxl({Instructions[InstructionPointer + 1]})",
            2 => $"Bst({Instructions[InstructionPointer + 1]})",
            3 => $"Jnz({Instructions[InstructionPointer + 1]})",
            4 => $"Bxc({Instructions[InstructionPointer + 1]})",
            5 => $"Out({Instructions[InstructionPointer + 1]})",
            6 => $"Bdv({Instructions[InstructionPointer + 1]})",
            7 => $"Cdv({Instructions[InstructionPointer + 1]})",
            _ => "Invalid opcode",
        };
    }
}
